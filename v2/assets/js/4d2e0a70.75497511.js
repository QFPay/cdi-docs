"use strict";(self.webpackChunkqfpay_sdk=self.webpackChunkqfpay_sdk||[]).push([[1980],{61531:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=a(74848),r=a(28453);const o={},s="Element SDK",i={id:"online-shop/paymentelement",title:"Element SDK",description:"Element Sequence diagram",source:"@site/docs/03-online-shop/03-paymentelement.md",sourceDirName:"03-online-shop",slug:"/online-shop/paymentelement",permalink:"/docs/online-shop/paymentelement",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"qfpaySidebar",previous:{title:"Online Pre-authorisation Payment APIs",permalink:"/docs/online-shop/online-pre-authorisation"},next:{title:"Recurring Payment",permalink:"/docs/online-shop/qfpay-recurring-payment"}},p={},l=[{value:"import JS library",id:"import-js-library",level:2},{value:"Code examples",id:"code-examples",level:2},{value:"1.payment mode",id:"1payment-mode",level:3},{value:"1.1 credit card form (visa/mastercard)",id:"11-credit-card-form-visamastercard",level:4},{value:"1.2 complete payment function including credit card form, Alipay HK, Alipay CN, WechatPay, QuickPass, FPS, Payme etc",id:"12-complete-payment-function-including-credit-card-form-alipay-hk-alipay-cn-wechatpay-quickpass-fps-payme-etc",level:4},{value:"2. payment token creation mode",id:"2-payment-token-creation-mode",level:3},{value:"2.1 visa/master card-form",id:"21-visamaster-card-form",level:4},{value:"Instruction Manual",id:"instruction-manual",level:2},{value:"global object QFPay and related APIs",id:"global-object-qfpay-and-related-apis",level:2},{value:"1. QFpay.config(params)",id:"1-qfpayconfigparams",level:3},{value:"2. qfpay.retrievePaymentIntent()",id:"2-qfpayretrievepaymentintent",level:3},{value:"3. qfpay.element(appearance)",id:"3-qfpayelementappearance",level:3},{value:"4. qfpay.payment()",id:"4-qfpaypayment",level:3},{value:"5. qfpay.confirmPayment()",id:"5-qfpayconfirmpayment",level:3},{value:"6. qfpay.confirmWalletPayment()",id:"6-qfpayconfirmwalletpayment",level:3},{value:"7. qfpay.token()",id:"7-qfpaytoken",level:3},{value:"8. qfpay.retrieveTokenIntent()",id:"8-qfpayretrievetokenintent",level:3},{value:"9. qfpay.createToken()",id:"9-qfpaycreatetoken",level:3},{value:"Payment object and APIs",id:"payment-object-and-apis",level:2},{value:"1. payment.pay(params1, params2)",id:"1-paymentpayparams1-params2",level:3},{value:"2. payment.walletPay(params1, params2)",id:"2-paymentwalletpayparams1-params2",level:3},{value:"3. payment.inquiry(params1, params2)",id:"3-paymentinquiryparams1-params2",level:3},{value:"token object and APIs",id:"token-object-and-apis",level:2},{value:"1. token.intent(params1, params2)",id:"1-tokenintentparams1-params2",level:3},{value:"Element object and APIs",id:"element-object-and-apis",level:2},{value:"1. elements.create(params1, params2, params3) --- support Visa/Mastercard card payment only",id:"1-elementscreateparams1-params2-params3-----support-visamastercard-card-payment-only",level:3},{value:"2. elements.createEnhance(params) ---  support Visa Mastercard card payment, ApplePay payment,  token creation,  token creation in payment mode",id:"2-elementscreateenhanceparams------support-visa-mastercard-card-payment-applepay-payment--token-creation--token-creation-in-payment-mode",level:3},{value:"Retrieve selected wallet type",id:"retrieve-selected-wallet-type",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"element-sdk",children:"Element SDK"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://www.plantuml.com/plantuml/png/VLF1ZXCn3BtdAwozmuAuzO1s0Qs4458H7r0bgQTZTPBCEiukvUjn9bEbhO1BbTX-p--zPXwoM9OI9cEz90PVigI033OlPpDhcppDDWhSVKVsOpqzSOg2SG-VH_J7L0Isze1t5HM6Vs0-MNzKI1jorqC_dhRs13XXGBt-_F9jcNeUjFAtmKvLXvpUZ36sI8ebE6HJbSERZwfb0_wiK0rIYYOCIyTTT1YV2whNu6gh4MgRqGh2R4-BAAg6nSIaDQR3AEPn-tK3zsj_jug_Vtb_tv2xSsT5rhWgsZ1AuVWVukiElD8qWKF0NpCnxhKC7zv1e5W4SwSDxcnvNT2okYPhzbko6wsHa9teDuAtl8SXST1rCjwYMg8TE5H9CgumYXLeQxpNqK_aZv2B2oJWYaYApUQ4WvWARqK82geEASmjHNNfJX3MfzCztgX_IKVKcufzwrCSYCDsrJsKw8MkzhLKTeMdwXCqIMBq0dFXEMNiInRw_X3MBFepQVKB8NqWbqaQlcNGUpvLRsgiJiqfwi83fp833N2XZ39alA4uA-qVfwHBp2kwJB8OC2lfOpv5FtAAgUHgYWRoxV_fueFhwdBn7lFDQELxq9yIfZy0",alt:"Element Sequence diagram"})}),"\n",(0,t.jsx)(n.p,{children:"create your own checkout flows by using QFPay prebuilt UI components"}),"\n",(0,t.jsx)(n.h2,{id:"import-js-library",children:"import JS library"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'// sanbox environment\n<script src="https://cdn-int.qfapi.com/qfpay_element/qfpay.js"><\/script>\n// live test environment\n<script src="https://test-cdn-hk.qfapi.com/qfpay_element/qfpay.js"><\/script>\n// production environment\n<script src="https://cdn-hk.qfapi.com/qfpay_element/qfpay.js"><\/script>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"code-examples",children:"Code examples"}),"\n",(0,t.jsx)(n.h3,{id:"1payment-mode",children:"1.payment mode"}),"\n",(0,t.jsx)(n.h4,{id:"11-credit-card-form-visamastercard",children:"1.1 credit card form (visa/mastercard)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'// initialize qfpay object\nconst qfpay = QFpay.config()\n\n// initialize payment object\nconst payment = qfpay.payment()\n\n// set payment related parameters\npayment.pay({\n  goods_name: "goods",\n  paysource: "payment_element"\n}, "e487a02e3e1143e482db765ccec63d58")\n\n// initialize element object and generate card form\nconst elements = qfpay.element()\nelements.createEnhance({\n  selector: "#container"\n})\n\n// trigger card form submission and receive payment response\nconst response = qfpay.confirmPayment({\n  return_url: \'https://xxx.xxx.com\'\n})\n'})}),"\n",(0,t.jsx)(n.h4,{id:"12-complete-payment-function-including-credit-card-form-alipay-hk-alipay-cn-wechatpay-quickpass-fps-payme-etc",children:"1.2 complete payment function including credit card form, Alipay HK, Alipay CN, WechatPay, QuickPass, FPS, Payme etc"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"\n// initialize qfpay object\nconst qfpay = QFpay.config()\n\n// initialize payment object\nconst payment = qfpay.payment()\n\n// validate payment intent valye\nqfpay.retrievePaymentIntent()\n\n// set payment parameters\npayment.walletPay(\n{\n  lang:  'zh-cn',\n  goods_info:  'goods_info',\n  goods_name:  \"goods_name\",\n  paysource:  \"payment_element_checkout\",\n  out_trade_no: intentParams.out_trade_no,\n  txamt:  intentParams.txamt,\n  txcurrcd:  intentParams.txcurrcd,\n  support_pay_type: ['Alipay', 'WeChat', 'UnionPay', 'AlipayHK', \n  'FPS', 'VisaMasterCardPayment', 'ApplePay', 'VisaMasterCardPreAuth']\n},intentParams.payment_intent);\n// initalize element object and create wallet list\nconst  appearance = {\nvariables: {\n\tcolourComponentText:  'black',\n\tcolorQRCodeTopPromptContent:  '#000000',\n\tcolorQRCodeBottomPromptContent:  '#000000',\n\tfontWeightQRCodeTopPrompt:  '900',\n\tfontWeightQRCodeBottomPrompt:  '300'\n},\nbillingAddressDisplay: {\n\tcity:  true,\n\taddress1:  true,\n\taddress2:  true,\n}\n}\nconst elements = qfpay.element(appearance)\nelements.createWallet({\n\tselector:  \"#container\"\n})\n\n//trigger submission and retrieve payment response\nconst response = qfpay.confirmWalletPayment({\nreturn_url:  'https://xxx.xxx.com'\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-payment-token-creation-mode",children:"2. payment token creation mode"}),"\n",(0,t.jsx)(n.h4,{id:"21-visamaster-card-form",children:"2.1 visa/master card-form"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'//2.1 credit card form\n// initialize qfpay object\nconst qfpay = QFpay.config()\n\n// initialize token object\nconst token = qfpay.token()\n\n// set token cereation parameters\ntoken.intent({\n  paysource: "payment_element"\n},"e487a02e3e1143e482db765ccec63d58")\n\n// initialize element object,and generate card-form \nconst elements = qfpay.element()\nelements.createEnhance({\n  seletor: "#container",\n  element: "token"\n})\n\n// trigger form submission and receive response\nconst response = qfpay.createToken({\n  return_url: \'https://xxx.xxx.com\'\n})\n'})}),"\n",(0,t.jsx)(n.h2,{id:"instruction-manual",children:"Instruction Manual"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plaintext",children:"Prerequisites:\nimport SDK library (qfpay.js) according to your environment and purpose\n"})}),"\n",(0,t.jsx)(n.h2,{id:"global-object-qfpay-and-related-apis",children:"global object QFPay and related APIs"}),"\n",(0,t.jsx)(n.h3,{id:"1-qfpayconfigparams",children:"1. QFpay.config(params)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * parameters: optional, Object, default valie: {region: 'hk', env: 'prod'},\n *      region possible values\uff1a\n *        'hk' \t\t- live/live test\n *        'qa' \t\t- sandbox\n *\n *      env possible values:\n *        'prod' \t- live environment\n *        'test' \t- live test environment\n *        'qa' \t\t- sandbox environment\n * return: qfpay object\n * purpose: generate qfpay global object\n */\nconst qfpay = QFpay.config()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-qfpayretrievepaymentintent",children:"2. qfpay.retrievePaymentIntent()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * parameters: N/A\n * return: response code, payment intent is available for use if '0000' value, otherwise not available\n * purpose: validate payment intent is correct and available for use\n */\nconst intentResponse = qfpay.retrievePaymentIntent()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-qfpayelementappearance",children:"3. qfpay.element(appearance)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * parameters: optional, Object, {theme: string, variables: Object, billingAddressDisplay: Object}\n *      theme: support only value 'night', night mode, \n *      if values are set in variables, the style will apply those values only\n *      variables: {\n *        fontFamily: 'cursive',         // Font Family\n *        fontWeight: '400',             // Font Weight\n *        colorText: 'black',            // Text Color\n *        sizeFontSubTitle: 'inherit',   // Font Size\n *        colourBackground: '#fff',      // Background Color\n *        colourPrimary: '#ced4da',      // Input Box Color\n *        colourComponentText: 'purple', // Input Box Text Color\n *        sizeComponentText: '15px',     // Input Box Font Size\n *        colourErrorMessage: '#da5d4a', // Error Message Color\n *        sizeErrorMessage: 'inherit'    // Error Message Font Size\n *        colorPaymentButton: '#000000' //payment button color\n *        colorPaymentButtonText: '#FFFFFF'  //payment button text color\n *        colorQRCodeTopPromptContent: '#000000'  // QRCode Top memo text color\n *        colorQRCodeBottomPromptContent: '#000000'  //QRCode bottom memo text color\n *       fontWeightQRCodeTopPrompt: '900'  //QRCode Top memo font weight\n *       fontWeightQRCodeBottomPrompt: '300'  //QRCode bottom memo font weight\n *      }\n *      billingAddressDisplay: {\n *        city: true      // flag for controlling displayment of city &  postal code in billing address\n *        address1: true  // flag for controlling displayment of address1 in billing address\n *        address2: true  // flag for controlling displayment of address2 in billing address\n *      }\n * return\uff1aelement object\n * purpose: generate element object\n */\nconst elements = qfpay.element()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-qfpaypayment",children:"4. qfpay.payment()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * parameters: N/A\n * return\uff1a payment object\n * purpose: generate payment object\n */\nconst qfpay = QFpay.config()\nconst payment = qfpay.payment()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"5-qfpayconfirmpayment",children:"5. qfpay.confirmPayment()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * parameters\uff1aoptional, Object type, {return_url: 'https://xxx.xxx.xxx'}, the page will be redirect to specific page mentioned in return_url parameter after payment completed. Otherwise, will stay in the same page\n * return\uff1a\n *   1. card payment\n *      return value\uff1acode, description, out_trade_no, syssn\n *      '0000' response code if success payment,\n *      otherwise failure payment, error message can reference to description\n *\n *   2. ApplePay\n *      return value\uff1acode, description; \n *      code value:'1111', Applepay payment cancalled\n *      code value:'0000', payment success, can refer to description value for payment status description\n * purpose\uff1areturn payment result\n */\nconst paymentResponse = qfpay.confirmPayment({\n  return_url: 'https://www.baidu.com'\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"6-qfpayconfirmwalletpayment",children:"6. qfpay.confirmWalletPayment()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * parameters\uff1aoptional, Object type, {return_url: 'https://xxx.xxx.xxx'}, the page will be redirect to specific page mentioned in return_url parameter after payment completed. Otherwise, will stay in the same page\n * return\uff1a\n *   1. card payment\n *      return value\uff1acode, description, out_trade_no, syssn\n *      '0000' response code if success payment,\n *      otherwise failure payment, error message can reference to description\n * purpose\uff1areturn payment result\n */\nconst paymentResponse = qfpay.confirmPayment({\n  return_url: 'https://www.baidu.com'\n})\n"})}),"\n",(0,t.jsx)(n.h3,{id:"7-qfpaytoken",children:"7. qfpay.token()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * parameters: N/A\n * return\uff1atoken object\n * purpose: generate token object\n */\nconst qfpay = QFpay.config()\nconst payment = qfpay.token()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"8-qfpayretrievetokenintent",children:"8. qfpay.retrieveTokenIntent()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * parameters: N/A\n * return: code\n *     code value: '0000', token is available for use\n *     otherwise token is not available for use\n * purpose: validate token intent is correct and available for use\n */\nconst intentResponse = qfpay.retrievePaymentIntent()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"9-qfpaycreatetoken",children:"9. qfpay.createToken()"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'/**\n * \u53c2\u6570\uff1aoptional\uff0cObject\uff0c{return_url: \'https://xxx.xxx.xxx\'},the page will be redirect to specific page mentioned in return_url parameter after action completed. Otherwise, will stay in the same page\n * \n * return\uff1acode,description,customer_id, card info,token info\n *     code value \'0000\', action success\n *     customer_id: QFPay generated customer Id\n *     card: {\n *         brand: "xxxx", // card scheme, e.g. VISA\n *         suffix: "xxxx" // card number last 4 digits, e.g. 1000\n *     }\n *     token: {\n *         event: "CREATE", // create token action\n *         token_id: "xxxxxxx" // generated payment token id\n *     }\n *     other code value, please refer to descirption value for fail reason\n * purpose\uff1areturn token related info.\n */\n'})}),"\n",(0,t.jsx)(n.h2,{id:"payment-object-and-apis",children:"Payment object and APIs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const qfpay = QFpay.config()\nconst payment = qfpay.payment()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"1-paymentpayparams1-params2",children:"1. payment.pay(params1, params2)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * parameters\uff1a\t\n *     \t   params1\uff0cmandatory\uff0cObject, \n *              {goods_name: '', paysource: 'payment_element'}\n *               goods_name: goods name,optional;\n *               paysource: fixed, value:payment_element, mandatory\n *         params2, mandatory, string, payment intent value from API\n * extra special parameters in 'params1'\uff1a\n *         customer_id: params1 optional parameter\uff0cQFPay generated customer Id\n *         token_expiry: params1 optional parameter, Token expiry date\n *         token_reason: params1 optional parameter, Reason for token creation\n *         token_reference: params1 optional parameter, Reference for token\n *         no need pass above special parameters if use payment function only\n *         if would like to collect card information for tokenization purpose, then need pass above parameters\n * return: No\n * purpose\uff1aset payment parameters\n */\npayment.pay({\n  goods_name: 'goods',\n  paysource: 'payment_element'\n}, 'SDF8980SFFSDF890SDF')\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-paymentwalletpayparams1-params2",children:"2. payment.walletPay(params1, params2)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * parameters:\n *     params1, mandatory, Object, { lang: 'zh-cn', goods_name: '', paysource: 'payment_element', paysource: \"payment_element_checkout\", out_trade_no: intentParams.out_trade_no, txamt: intentParams.txamt, txcurrcd: intentParams.txcurrcd}\n *     lang: language, optional, zh-cn:simplify chinese, zh-hk traditional chinese, en: english\n *     goodsname: goods name, optional,\n *     paysource: fix value, payment_element_checkout,mandatory\n *     out_trade_no: merchant order id, mandatory\n *     txamt: transaction amount, mandatory\n *     txcurrcd: transaction currency, mandatory\n *     support_pay_type: customize display of activited payment methods, optional, show all activated methods if not pass this parameter, detail parameter values please refer to the folllwoing description\n *     params2, mandatory, string, payment intent value from \n * extra special parameters in 'params1':\n *         customer_id: params1 optional parameter\uff0cQFPay generated customer Id\n *         token_expiry: params1 optional parameter, Token expiry date\n *         token_reason: params1 optional parameter, Reason for token creation\n *         token_reference: params1 optional parameter, Reference for token\n *         no need pass above special parameters if use payment function only\n *         if would like to collect card information for tokenization purpose, then need pass above parameters\n * return: No\n * purpose\uff1aset payment parameters\n */\n/**\n * params1 support_pay_type parameter value list\n * 'Alipay'                  // 'Alipay CN',\n * 'WeChat'                  // 'Wechat',\n * 'UnionPay'                // 'UnionPay and QuickPass',\n * 'AlipayHK'                //  'Alipay HK',\n * 'FPS'                     //  'FPS',\n * 'VisaMasterCardPayment'   //  'Visa/MasterCard'\n * 'PayMe'                   //  'PayMe'\n * 'ApplePay'                //   'ApplePay'\n * 'VisaMasterCardPreAuth'   //  'Visa/MasterCard Pre-Authorization'\n */\npayment.walletPay({\n\tgoods_info:  'goods_info',\n\tgoods_name:  \"goods_name\",\n\tpaysource:  \"payment_element_checkout\",\n\tout_trade_no:  intentParams.out_trade_no,\n\ttxamt:  intentParams.txamt,\n\ttxcurrcd:  intentParams.txcurrcd,\n}, 'SDF8980SFFSDF890SDF')\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-paymentinquiryparams1-params2",children:"3. payment.inquiry(params1, params2)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * parameters: \n *      params1, mandatory\uff0c Object, {syssn: string, out_trade_no: string, pay_type: string, respcd: stirng, start_time: string, end_time: string} | {}\n *               syssn: QF QF system serial no, use comma to separate mutliple values\n *               out_trade_no: merchant order ID, use comma to separate multiple values\n *               pay_type: payment type, use comma to separate multiple values\n *               respcd: response code, default all response code\n *               start_time: start time, format: 'YYYY-MM-DD HH:mm:ss', default current month start\n *               end_time: end time, format: 'YYYY-MM-DD HH:mm:ss', default current month end\n *      params2, mandatory, string, payment intent from API\n * return: inquiry result\n * purpose\uff1ainquiry payment result\n */\nconst inquiryResponse = payment.inquiry({}, 'SDF8980SFFSDF890SDF')\n"})}),"\n",(0,t.jsx)(n.h2,{id:"token-object-and-apis",children:"token object and APIs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const qfpay = QFpay.config()\nconst token = qfpay.token()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"1-tokenintentparams1-params2",children:"1. token.intent(params1, params2)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * parameters\uff1a\n *      params1, mandatory\uff0cObject, {paysource: 'payment_element'}\n *               paysource: fixed, value: payment_element\uff0cmandatory\n *      params2, mandatory, string, payment intent from API\n * return: N/A\n * purpose\uff1aset token intent parameters\n */\ntoken.intent({\n  paysource: 'payment_element'\n}, 'SDF8980SFFSDF890SDF')\n"})}),"\n",(0,t.jsx)(n.h2,{id:"element-object-and-apis",children:"Element object and APIs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const qfpay = QFpay.config()\nconst elements = qfpay.element()\n"})}),"\n",(0,t.jsx)(n.h3,{id:"1-elementscreateparams1-params2-params3-----support-visamastercard-card-payment-only",children:"1. elements.create(params1, params2, params3) --- support Visa/Mastercard card payment only"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'/**\n * parameters\uff1a\n *      params1, mandatory, string, card form id\n *      params2, optional, boolean, default value is:true, card form will show email address input if true value\n *      params3, optional, string, default value:payment, generate card form\n * return: N/A\n * purpose: generate card form\n */\nelements.create("#container")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-elementscreateenhanceparams------support-visa-mastercard-card-payment-applepay-payment--token-creation--token-creation-in-payment-mode",children:"2. elements.createEnhance(params) ---  support Visa Mastercard card payment, ApplePay payment,  token creation,  token creation in payment mode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/**\n * parameters\uff1aparams: Object, {selector: string, email: boolean, tab: boolean, element: string}\n *      selector: mandatory, string, element wallet id\n *      email: optional, boolean, default value:true, card form will show email address input if true\n *      tab: optional, boolean, default value:false, \n *           true:  element wallet switch way is tab \n *           false: wallet list switch way is vertical list\n *      element: optional, string, default value:payment, \n *           payment: normal payment mode\n *           token: token creation mode  \n * return: N/A\n * purpose: generate element wallet\n * NOTICE\uff1atab parameter only effecitve in payment mode\n */\nelements.createEnhance({\n  selector: '#container'\n})\n"})}),"\n",(0,t.jsx)(n.h2,{id:"retrieve-selected-wallet-type",children:"Retrieve selected wallet type"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"window.addEventListener('walletType', ({detail}) => {\n  /**\n   * detail: possible: ApplePay and Card\n   * detail:ApplePay, selected payment method is applepay\n   * detail:Card, selected payment method is card payment\n   */\n})\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>i});var t=a(96540);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);